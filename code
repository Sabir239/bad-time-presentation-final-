import pygame
import os

pygame.init()

# تشغيل الموسيقى
pygame.mixer.init()
pygame.mixer.music.load('undertale-au-bad-time-trio-theme-triple-the-threat.wab')
pygame.mixer.music.play(0)


# إعداد الشاشة
class Screen():
    def __init__(self, scr_h, scr_w):
        self.scrW = scr_w
        self.scrH = scr_h


scrn = Screen(500, 700)
screen = pygame.display.set_mode((scrn.scrW, scrn.scrH))
pygame.display.set_caption("bad time")


# إعداد الروح
class Soul():
    def __init__(self, x, y, w, h, step):
        self.x = x
        self.y = y
        self.w = w
        self.h = h
        self.stp = step
        self.velocity = 0
        self.gravity = 0.4
        self.health = 92
        self.visible = True

    def on_ground(self, box_bottom):
        return self.y + self.h >= box_bottom

    def rect(self):
        return pygame.Rect(self.x, self.y, self.w, self.h)


red_soul = Soul(330, 330, 30, 25, 2)

# تحميل الصور
souls = pygame.image.load("souls.png")
caje = pygame.image.load("Caja.png")
fight = pygame.image.load('FIGHT 0.png')
spar = pygame.image.load('MERCY 0.png')
act = pygame.image.load('ACT 0.png')
item = pygame.image.load('ITEM 0.png')
bone_img = pygame.transform.scale(pygame.image.load("big bone 1.png"), (20, 80))  # عظمة أفقية

# سبرايتات سانس
sans_intro = [pygame.image.load("intro/" + f) for f in sorted(os.listdir("intro")) if f.endswith(".png")]
sans_intro = [pygame.transform.scale(img, (220, 200)) for img in sans_intro]

sans_moves = [pygame.image.load("loop/" + f) for f in sorted(os.listdir("loop")) if f.endswith(".png")]
sans_moves = [pygame.transform.scale(img, (210, 230)) for img in sans_moves]

# تغيير حجم الصور
caje = pygame.transform.scale(caje, (600, 180))
souls = pygame.transform.scale(souls, (30, 20))
fight = pygame.transform.scale(fight, (120, 50))
act = pygame.transform.scale(act, (120, 50))
item = pygame.transform.scale(item, (120, 50))
spar = pygame.transform.scale(spar, (120, 50))

# الصندوق
box_rect = pygame.Rect(50, 240, caje.get_width(), caje.get_height())

# سانس
sans_x = 230
sans_y = 18
loop_sans_x = 0
loop_sans_y = 0


# العظام الأفقية
class Bone:
    def __init__(self, x, y, speed):
        self.x = x
        self.y = y
        self.speed = speed
        self.w = bone_img.get_width()
        self.h = bone_img.get_height()

    def move(self):
        self.x += self.speed
        # رجوع من الطرف الآخر
        if self.x <= box_rect.left or self.x + self.w >= box_rect.right:
            self.speed *= -1

    def draw(self):
        screen.blit(bone_img, (self.x, self.y))

    def rect(self):
        return pygame.Rect(self.x, self.y, self.w, self.h)


bones = [
    Bone(box_rect.left + 60, box_rect.top + 10, 2),
    Bone(box_rect.right - 60, box_rect.top + 90, -2),
]


# دالة الخسارة
def show_game_over():
    font = pygame.font.Font("pixel-comic-sans-undertale-sans-font.otf", 40)
    text = font.render("do you think \n, you can win", True, (255, 0, 0))
    screen.blit(text, (180, 200))
    pygame.display.update()
    pygame.time.delay(3000)
    pygame.quit()
    exit()


# دالة الرسم
def draw_scene(sans_img, x, y):
    screen.fill((0, 0, 0))
    screen.blit(caje, (box_rect.x, box_rect.y))
    screen.blit(souls, (red_soul.x, red_soul.y))
    screen.blit(fight, (50, 450))
    screen.blit(act, (210, 450))
    screen.blit(item, (370, 450))
    screen.blit(spar, (530, 450))
    screen.blit(sans_img, (sans_x, sans_y))

    for bone in bones:
        bone.draw()

    pygame.display.update()


# الإنترو
current_frame = 0
while current_frame < len(sans_intro):
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            quit()
    draw_scene(sans_intro[current_frame], sans_x, sans_y)
    current_frame += 1
    pygame.time.delay(100)

# اللوب
current_frame = 0
frame_delay = 0
run = True
start_time = pygame.time.get_ticks()
gravity_enabled = False
jump_2 = -12

while run:
    pygame.time.delay(10)
    current_time = pygame.time.get_ticks()

    if not gravity_enabled and current_time - start_time >= 11000:
        gravity_enabled = True
    if current_time - start_time >= 22000:
        jump_2 = -12
        red_soul.gravity = 1

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            quit()

    keys = pygame.key.get_pressed()

    if not gravity_enabled:
        if keys[pygame.K_UP] and red_soul.y > box_rect.top:
            red_soul.y -= red_soul.stp
        if keys[pygame.K_DOWN] and red_soul.y + red_soul.h < box_rect.bottom:
            red_soul.y += red_soul.stp
    else:
        if keys[pygame.K_UP] and red_soul.on_ground(box_rect.bottom):
            red_soul.velocity = jump_2

    if keys[pygame.K_LEFT] and red_soul.x > box_rect.left:
        red_soul.x -= red_soul.stp
    if keys[pygame.K_RIGHT] and red_soul.x + red_soul.w < box_rect.right:
        red_soul.x += red_soul.stp

    if gravity_enabled:
        red_soul.velocity += red_soul.gravity
        red_soul.y += red_soul.velocity

        if red_soul.y + red_soul.h > box_rect.bottom:
            red_soul.y = box_rect.bottom - red_soul.h
            red_soul.velocity = 0
        if red_soul.y < box_rect.top:
            red_soul.y = box_rect.top
            red_soul.velocity = 0

    for bone in bones:
        bone.move()
        if red_soul.rect().colliderect(bone.rect()):
            show_game_over()

    frame_delay += 1
    if frame_delay >= 5:
        current_frame = (current_frame + 1) % len(sans_moves)
        frame_delay = 0

    draw_scene(sans_moves[current_frame], loop_sans_x, loop_sans_y)

pygame.quit()
